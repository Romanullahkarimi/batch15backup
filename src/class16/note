There are tree types of variables with respect to their scope
local variables:
    if a variable is created inside a block of code like a method, loop, if condition etc. they are
    called local variables.
Upside:
    Local variables occupy the memory for the shortest period of time. You should always try to write code
    with the help of local variables.
Downside:
    They can't be accessed outside the block in which they are created. They have very limited scope.
instance variables:
    All the variables which are created inside a class but outside of methods are called instance variables.
upside:
    we can use them in all the instance methods of that class. their scope is larger than local variables.
downside:
    They stay longer in the memory as compared to local variables.
static variables:
    All the variables which are outside of methods and have the static keyword are called static variables.
upside:
    static variables only occupy one memory location from the RAM even though we create 1000 objects of that
    class.
    They can be used in any block of code inside the class they can be accessed in any methods of a class
    they can also be accessed with the help of any object of that class. They have the most wide scope
Downside:
    They are loaded into the memory when a class is loaded even though you don't use them.
    ================================================================
  Summary:
  In Java, access modifiers are keywords used in class, method,
  and variable declarations that determine the level of access to the members of a class. The four access modifiers in Java are:
  1.    public - The member can be accessed from anywhere.
  2.    protected - The member can be accessed within the same package and by subclasses in other packages.
  3.    default (no keyword) - The member can be accessed within the same package.
  4.    private - The member can only be accessed within the same class.
    Access modifiers?


    access modifiers are some keywords in java that we can to control